V1.0
- Initialised file structure
V1.1
- Initialised classes
- Created empty functions detailed in UML diagram with either pass or return None
- Created main attributes for each class detailed in UML diagram with value None
- Imports between files
- Created usage() function in Chess.py
- Added checks for program calls by user, and calls usage() if something is wrong, e.g. they called Pieces.py
- Chess.py creates a Game instance with the UItype the user requested
- Implemented Terminal UI _display_board function
- Renamed Game.py to Game_Player.py to reflect it containing the Player class
V1.2
- Implemented the _avail_moves algorithm for a standard piece, meaning rooks, bishops, queens, kings, knights, and pawns without the en passent or promotion logic or 1st move moving 2 spaces
- Implemented the _avail_moves for a player, which just calls the _avail_moves function for each of its pieces, but formatts it as a list of [[oldx, oldy], [newx, newy]]
- Finished the Game.__reset_board so that it puts the default pieces in, correctly assinging them to each player
- This required a _2nd_init() method for the Player class, so that it collects all the pointers to its pieces when the Game instance is created
- All piece classes have been created, with move functionality tailored for each, with the knight now working as intended
- Flipped the board output vertically in the Terminal._display_output() method, so that it makes more sense, i.e. the indexes increase with the board's standard labelled row numbers
V1.3
- Game.__is_move_legal() implemented
- Game__get_settings() implemented
- Added Game.__is_over() function, that currently returns False as check is not implemented
- Game.__do_turn() implemented along with Game.play_game, accepting the alpha-numeric board positions, however it only checks the positions is inside in the board, and crashes if it isn't in the correct format
- Fixed incorrect position crashing issue
- MVP Complete
V2.1
- Game.__get_settings() now calls its UI._get_settings(), with the code previously there being in the Terminal._get_settings()
- Added the numbers and letters on right and below of the board, to match the left and top
- Implemented Player._in_check, Player._in_checkmate() and Player._is_draw(), with the only rule being stalemate
- Modified Piece._avail_moves() to take a careifcheck argument, and if true, ensure moves returned don't make, or keep, their king in check
- Added Game._make_move(move) and Game._undo_move(), including the Game._undo_stack attribute
- Made Game.__is_over() actually check if the game is over according to the current checkmate and draw conditions
V2.2
- Fixed Terminal._get_settings()
- Implemented the AI class
- Moved move choice to Player / AI class, not Game.__do_turn()
- Made AI pick a random move from current legal moves
- Moved draw checks from Player class to Game class
- Draw checks for just 2 kings left
- Added message to game end to say who won
- Can play a full game against the AI (picking random moves), according to current rules
V3.1
- Pawns now take diagonally not forwards, and can move forwards 2 on their first move
- Pawns can now en passant
- Corrected use of draw vs stalemate
V3.2
- Pawns can now be promoted if they reach rank 8