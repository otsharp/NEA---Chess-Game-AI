wordV1.0
- Initialised file structure
V1.1
- Initialised classes
- Created empty functions detailed in UML diagram with either pass or return None
- Created main attributes for each class detailed in UML diagram with value None
- Imports between files
- Created usage() function in Chess.py
- Added checks for program calls by user, and calls usage() if something is wrong, e.g. they called Pieces.py
- Chess.py creates a Game instance with the UItype the user requested
- Implemented Terminal UI _display_board function
- Renamed Game.py to Game_Player.py to reflect it containing the Player class
V1.2
- Implemented the _avail_moves algorithm for a standard piece, meaning rooks, bishops, queens, kings, knights, and pawns without the en passent or promotion logic or 1st move moving 2 spaces
- Implemented the _avail_moves for a player, which just calls the _avail_moves function for each of its pieces, but formats it as a list of [[oldx, oldy], [newx, newy]]
- Finished the Game.__reset_board so that it puts the default pieces in, correctly assinging them to each player
- This required a _2nd_init() method for the Player class, so that it collects all the pointers to its pieces when the Game instance is created
- All piece classes have been created, with move functionality tailored for each, with the knight now working as intended
- Flipped the board output vertically in the Terminal._display_output() method, so that it makes more sense, i.e. the indexes increase with the board's standard labelled row numbers
V1.3
- Game.__is_move_legal() implemented
- Game__get_settings() implemented
- Added Game.__is_over() function, that currently returns False as check is not implemented
- Game.__do_turn() implemented along with Game.play_game, accepting the alpha-numeric board positions, however it only checks the positions is inside in the board, and crashes if it isn't in the correct format
- Fixed incorrect position crashing issue
- MVP Complete
V2.1
- Game.__get_settings() now calls its UI._get_settings(), with the code previously there being in the Terminal._get_settings()
- Added the numbers and letters on right and below of the board, to match the left and top
- Implemented Player._in_check, Player._in_checkmate() and Player._is_draw(), with the only rule being stalemate
- Modified Piece._avail_moves() to take a careifcheck argument, and if true, ensure moves returned don't make, or keep, their king in check
- Added Game._make_move(move) and Game._undo_move(), including the Game._undo_stack attribute
- Made Game.__is_over() actually check if the game is over according to the current checkmate and draw conditions
V2.2
- Fixed Terminal._get_settings()
- Implemented the AI class
- Moved move choice to Player / AI class, not Game.__do_turn()
- Made AI pick a random move from current legal moves
- Moved draw checks from Player class to Game class
- Draw checks for just 2 kings left
- Added message to game end to say who won
- Can play a full game against the AI (picking random moves), according to current rules
V3.1
- Pawns now take diagonally not forwards, and can move forwards 2 on their first move
- Pawns can now en passant
- Corrected use of draw vs stalemate
V3.2
- Pawns can now be promoted if they reach rank 8
V3.3
- Castling implemented
V3.4
- Rest of the FIDE draw rules added
	- 3/5 fold repetition rule
	- 50/75 move rule
	- Impossibility of checkmate - already have King vs King
		- King vs King + Bishop
		- King vs King + Knight
		- King + Bishop vs King + Bishop of other colour
	- Mutual agreement
V3.5
- Added option for playing AI vs AI
V3.6
- A GUI now displays the board state
- A player can click on a piece and intended destination, enlarging the selected piece, and moving it if it is a legal move
V3.7
- Can select between player and ai for white and black
- Allowed pawns to be promoted by adding selection UI for piece choice
V3.8
- Added message popups to display invalid move messages and white / black wins / draw
- Popup to get player decision on wanting to draw
- Game closes after a player has won or game is drawn
- Added option to flip piece images vertically for each player
- Added a label at bottom of board to display who it is to play, if piece flipping is disabled
- Removed invalid move popup
V4.1
- Implemented a minimax AI that can be used instead of the random one, with variable max search depth
V4.2
- Fixed minimax AI, previously it was playing to lose
- Fixed pawn could double move through own pieces
- Fixed en passent
- Added timing code to analyse where time was being spent during an AI move
V4.3
- Added a Monte-carlo tree search AI, that uses random playouts
- Added option to select between the different AI types, random, Minimax and MCTS
- Due to time analysis, detecting if a player is in check was optimised, as it took up a very large proportion of an AI's move time, causing the implementation of a Piece._is_takeable(pos), which returns if a piece could take a certain pos, which is always the opponent's king's position, ignoring if it would cause the other player to be in check afterwards
- Fixed bug where when a pawn was promoted to a rook, and the king hadn't moved, it could try to castle, which crashed the program
- Fixed the Minimax AI implementation as it was returning the wrong score in some cases, causing it to play badly
- Fixed the Minimax AI implementation as the get_score() funcition didn't take into account checkmate, so the AI didn't go for, or defend, checkmates
- Added Heatmaps.py which contains code to generate heatmaps from 2D arrays to visualize how piece positions affect their worth, according to how the get_score() function will work
- Fixed a bug where a king could move into check by a pawn
- Fixed promotions causing a crash with opening book implemented
- Added GUI._disable() and .enable() so that the GUI can be frozen during AI moves to prevent buggy rendering of the board when a square is clicked during the AI move
- When using the "flip" setting in the GUI, sprites are now rotated 180 degrees instead of being mirrored vertically
- Only allows selecting of own players piece, not other player or no piece
- Better move rejection, e.g. trying to move a player's piece to another one of their pieces will just select the new piece, not attempt to move there
- The last move squares are highlighted green to make it clear to the player where either the AI, or another player, have moved
V4.4
- Improved the speed at which the advanced heuristics for the rook, queen and bishop are executed
- Fixed a bug where the implementation of the opening book could cause an issue with the castling code and crash the program
- Altered the start-up GUI so that there are options for account settings and loading games, as well as the creating a new game system
- This included renaming Game._play_game() to Game._wait_until_ready_then_play() to better represent the new functionality added within it
- Altered the in game GUI to have the options panel down the left as shown in the GUI wireframes
  - Including showing the current evaluation of the game by the program
- Implemented accounts system along with the database
  - This includes the menus and functionality to create and delete accounts, query player information, and sign in and out of accounts
- Implemented the loading and saving of unfinished games
- Implemented undoing moves in GUI
- Added an option to quit the current game
- Improved game settings when creating the game, including being able to alter AI difficulty during the game
- Added importing and exporting .pgn files, as well as a replay mode for finished games
- Highlights valid move destinations purple on the board for selected piece
- Implemented Fischer random chess as an option